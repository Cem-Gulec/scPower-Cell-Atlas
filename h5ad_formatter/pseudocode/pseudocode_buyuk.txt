Dataset: https://cellxgene.cziscience.com/collections/62ef75e4-cbea-454e-a0ce-998ec40223d3

library(Seurat)
library(SeuratData)
library(SeuratDisk)
library(DropletUtils)
library(scuttle)

source("R/datasets.R")
source("R/em.R")
source("R/expression_fit.R")
source("R/plotting.R")
source("R/power.R")
source("R/priors.R")


1. Reading the data in seurat format
   wholeDataset <- LoadH5Seurat("data/global_17_normal_3_homosap_329762.h5seurat", assays = "RNA")

2. Splitting dataset into Assay(technology) first
   splittedByAssayID <- SplitObject(wholeDataset, split.by = "assay_ontology_term_id")
   assayNames    <- names(splittedByAssayID)


3. Then Tissue
   splittedByTissueID <- list()   
   
   for(assay in splittedByAssayID){
      tissueMarker <- 1
      tissueCollection <- list()
      tissues <- SplitObject(assay, split.by = "tissue_ontology_term_id")
      tissueNames <- names(tissues)

      for(tissue in tissues){
         assayName <- assayNames[[length(splittedByTissueID) + 1]]
         tissueName <- tissueNames[[tissueMarker]]
         description <- list(assayName, tissueName, tissue)
         tissueCollection[[length(tissueCollection)+1]] <- list(description)
         tissueMarker <- tissueMarker + 1
      }
      splittedByTissueID[[length(splittedByTissueID)+1]] <- tissueCollection
   }


4. Then Cell Type
   countsByCellTypeID <- list()

   for(tissueDataset in splittedByTissueID){
      cellTypeDataset <- list()

      for(tissue in tissueDataset){
         cellTypeCollection <- list()
         cellTypes <- SplitObject(tissue, split.by = "cell_type_ontology_term_id")

         for(cellType in cellTypes)
            # Cell count threshold: check which cell type has how many cells related to it. 
            # If it is under 50, don't include them
            if(cellType@assays$RNA@counts@Dim[[2]] >= 50)
               cellTypeCollection[[length(cellTypeCollection)+1]] <- cellType@assays$RNA@counts

         cellTypeDataset[[length(cellTypeDataset)+1]] <- cellTypeCollection
      }

      countsByCellTypeID[[length(countsByCellTypeID)+1]] <- cellTypeDataset
   }


5. Function for conversion from dgCMatrix (sparse matrix) to list
   sparseToList <- function(counts){

     tmp <- matrix(data=0L, nrow = counts@Dim[1], ncol = counts@Dim[2])
     
     row_pos <- counts@i+1
     col_pos <- findInterval(seq(counts@x)-1,counts@p[-1])+1
     val <- counts@x
       
     for (i in seq_along(val)){
         tmp[row_pos[i],col_pos[i]] <- val[i]
     }
       
     row.names(tmp) <- counts@Dimnames[[1]]
     colnames(tmp) <- counts@Dimnames[[2]]
     return(tmp)
   }


6. Tam da buraya gönderilen count matrixi subsample edecek 
   ve complete de eklenmiş bir şekilde tüm listeyi dönecek fonksiyon

   subsampleIntoList <- function(countsAsDGC){
      tmp <- list()
      countsAsList <- sparseToList(countsAsDGC)
      tmp[[length(tmp)+1]] <- countsAsList

      for(s in c(0.75,0.5,0.25)){
         counts.subsampled <- downsampleMatrix(countsAsList, prop = s, bycol = TRUE)
         counts.subsampled <- sparseToList(counts.subsampled)
         tmp[[length(tmp)+1]] <- counts.subsampled
      }      

      tmp <- setNames(tmp, c("complete", "subsampled75", "subsampled50", "subsampled25"))

      return(tmp)
   }